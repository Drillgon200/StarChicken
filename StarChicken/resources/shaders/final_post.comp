#version 460

const uint OBJECT_FLAG_SELECTED = 1;
const uint OBJECT_FLAG_ACTIVE = 2;

layout (set = 0, binding = 0, rgba16f) uniform readonly image2D sceneTex;
layout (set = 0, binding = 1, rgba8) uniform readonly image2D uiTex;
layout (set = 0, binding = 2, rgba8) uniform writeonly image2D swapchainImage;
layout (set = 0, binding = 3, r32i) uniform readonly iimage2D outlineTex;
struct Object {
	uint selectionFlags;
	uint visible;
};
layout (set = 0, binding = 4, std430) restrict readonly buffer Objects {
	Object object[];
} objects;

vec4 get_outline_color(ivec2 texCoord, ivec2 swapchainExtent){
	vec4 outline = vec4(0.0);
	uint thisId = imageLoad(outlineTex, texCoord).x;
	uint thisFlags = thisId == -1 ? 0 : objects.object[thisId].selectionFlags;
	for(int i = -1; i <= 1; i++){
		for(int j = -1; j <= 1; j++){
			if(i == 0 && j == 0){
				continue;
			}
			ivec2 coord = clamp(texCoord + ivec2(i, j), ivec2(0, 0), swapchainExtent-ivec2(1));
			uint currentId = imageLoad(outlineTex, coord).x;
			uint currentFlags = currentId == -1 ? 0 : objects.object[currentId].selectionFlags;
			if (thisId != currentId){
				outline.rgb = vec3(0.95, 0.6, 0.2);
				outline.a += 0.38;
			}
		}
	}
	return vec4(outline.rgb, min(outline.a, 1));
}

layout (push_constant) uniform SwapchainSize {
	int width;
	int height;
} swapchainSize;

layout (local_size_x = 16, local_size_y = 16) in;
void main(){
	ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 swapchainExtent = ivec2(swapchainSize.width, swapchainSize.height);
	if(texCoord.x < swapchainExtent.x && texCoord.y < swapchainExtent.y){
		vec4 outline = get_outline_color(texCoord, swapchainExtent);
		vec4 ui = imageLoad(uiTex, texCoord);
		vec4 scene = imageLoad(sceneTex, texCoord);
		scene.rgb = scene.rgb * (1.0 - outline.a) + outline.rgb * outline.a;
		vec4 final = vec4(scene.rgb * (1.0 - ui.a) + ui.rgb * ui.a, 1);
		imageStore(swapchainImage, texCoord, final.bgra);
	}
}
